{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","countdownTimer","n","timerName","setState","setTimeout","handleNewGameID","gameID","joinGame","isGameCreator","socket","emit","state","callbackData","sucess","appState","joinError","error","msg","errorMsg","console","log","createNewGame","axios","get","SERVER","then","cats","data","categories","startGame","category","selectedCategory","difficulty","numberQuestions","handleChange","event","target","name","value","handleSubmitName","playerName","numInc","io","connect","userAnswer","numTypers","updatedIndex","gameOver","this","on","countdownLength","questionLength","q","JSON","stringify","currentQuestion","correctAnswer","undefined","answer","questionNum","index","isCorrect","prevState","p","players","numJoiners","currentQ","className","for","id","placeholder","onChange","onClick","viewBox","fill","fillRule","d","clipRule","Object","entries","map","pl","key","cat","type","checked","inputMode","class","gameCountdown","style","width","questionCountdown","question","answers","a","idx","toString","disabled","score","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"+SAmfeA,G,MA9ef,kDACE,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAoFRC,eAAiB,SAACC,EAAGC,GACnB,EAAKC,SAAL,eAAiBD,EAAYD,IACzBA,EAAI,GACNG,YAAW,kBAAM,EAAKJ,eAAeC,EAAI,EAAGC,KAAY,MAxFzC,EA4FnBG,gBAAkB,SAACC,GACjB,EAAKH,SAAS,CAAEG,OAAQA,KA7FP,EAgGnBC,SAAW,WACT,EAAKJ,SAAS,CAAEK,eAAe,IAC/B,EAAKC,OAAOC,KAAK,YAAa,EAAKC,MAAML,QAAQ,SAACM,GAC5CA,EAAaC,OACf,EAAKV,SAAS,CAAEW,SAAU,UAG1B,EAAKX,SAAS,CACZY,UAAW,CAAEC,OAAO,EAAMC,IAAKL,EAAaM,YAE9CC,QAAQC,IAAIR,EAAaM,eA1GZ,EA+GnBG,cAAgB,WACd,EAAKlB,SAAS,CAAEK,eAAe,EAAMM,SAAU,SAC/C,EAAKL,OAAOC,KAAK,kBAAmB,IAAI,SAACJ,GACvCa,QAAQC,IAAI,6BAA+Bd,GAC3C,EAAKH,SAAS,CAAEG,OAAQA,OAE1BgB,IAAMC,IAAN,UAAa,EAAKC,OAAlB,gBAAuCC,MAAK,SAACC,GAC3CP,QAAQC,IAAIM,EAAKC,MACjB,EAAKxB,SAAS,CAAEyB,WAAYF,EAAKC,WAvHlB,EA2HnBE,UAAY,WACV,EAAKpB,OAAOC,KAAK,aAAc,CAC7BJ,OAAQ,EAAKK,MAAML,OACnBwB,SAAU,EAAKnB,MAAMoB,iBACrBC,WAAY,EAAKrB,MAAMqB,WACvBC,gBAAiB,EAAKtB,MAAMsB,kBAE9B,EAAK9B,SAAS,CAAEW,SAAU,eAlIT,EAqInBoB,aAAe,SAACC,GACd,EAAKhC,SAAL,eACGgC,EAAMC,OAAOC,KAAOF,EAAMC,OAAOE,QAEV,WAAtBH,EAAMC,OAAOC,MACf,EAAKlC,SAAS,CACZY,UAAW,CAAEC,OAAO,EAAOC,IAAK,OA3InB,EAuJnBsB,iBAAmB,WAEjB,EAAK9B,OAAOC,KAAK,cAAe,CAC9BJ,OAAQ,EAAKK,MAAML,OACnBkC,WAAY,EAAK7B,MAAM6B,aAEzB,EAAK/B,OAAOC,KAAK,UAAW,CAAE+B,OAAQ,EAAK9B,MAAMH,cAAgB,GAAK,EAAGF,OAAQ,EAAKK,MAAML,UA3J5F,EAAKkB,OAAS,wBACd,EAAKf,OAASiC,IAAGC,QAAQ,EAAKnB,QAC9B,EAAKb,MAAQ,CACXiC,WAAY,KACZtC,OAAQ,GACRkC,WAAY,GACZ1B,SAAU,OACVN,eAAe,EACfqC,UAAW,EACXZ,gBAAiB,GACjBD,WAAY,KACZD,iBAAkB,KAClBe,aAAc,EACdC,UAAU,EACVhC,UAAW,CACTC,OAAO,EACPC,IAAK,KAlBQ,EADrB,gEAwBuB,IAAD,OAClB+B,KAAKvC,OAAOwC,GACV,mBACA,YAA2D,IAAxDC,EAAuD,EAAvDA,gBAAiBC,EAAsC,EAAtCA,eAAgBlB,EAAsB,EAAtBA,gBAClCd,QAAQC,IAAI,mBACZ,EAAKpB,eAAekD,EAAiB,iBACrC,EAAK/C,SAAS,CACZW,SAAU,YACVqC,eAAgBA,EAChBD,gBAAiBA,EACjBjB,gBAAiBA,OAIvBe,KAAKvC,OAAOwC,GAAG,YAAY,SAACG,GAC1BjC,QAAQC,IAAI,mBAAqBiC,KAAKC,UAAUF,IAChD,EAAKjD,SAAS,CACZW,SAAU,OACVyC,gBAAiBH,EACjBI,mBAAeC,EACfb,WAAY,OAEd,EAAK5C,eAAe,EAAKW,MAAMwC,eAAgB,wBAEjDH,KAAKvC,OAAOwC,GAAG,kBAAkB,WAG/B,EAAKxC,OAAOC,KACV,kBACA,CACEgD,OAAQ,EAAK/C,MAAMiC,WACnBe,YAAa,EAAKhD,MAAM4C,gBAAgBK,MACxCtD,OAAQ,EAAKK,MAAML,SAErB,YAAkC,EAA/BuD,UAAgC,IAArBL,EAAoB,EAApBA,cACZrC,QAAQC,IAAI,+BAAiCoC,GAC7C,EAAKrD,UAAS,SAAC2D,GACb,MAAO,CACLN,cAAeA,EACfV,aAAcgB,EAAUhB,aAAe,YAMjDE,KAAKvC,OAAOwC,GAAG,iBAAiB,SAAChD,GAAD,OAAO,EAAKE,SAAS,CAAE0C,UAAW5C,OAClE+C,KAAKvC,OAAOwC,GAAG,WAAW,SAACc,GAAD,OAAO,EAAK5D,SAAS,CAAE6D,QAASD,OAC1Df,KAAKvC,OAAOwC,GAAG,WAAW,SAAChD,GACzBkB,QAAQC,IAAI,kBAAoBnB,GAChC,EAAKE,SAAS,CAAE8D,WAAYhE,OAE9B+C,KAAKvC,OAAOwC,GAAG,aAAa,WAC1B9B,QAAQC,IAAI,aACZ,EAAKjB,SAAS,CACZoD,qBAAiBE,EAEjBb,WAAY,KACZG,UAAU,SAjFlB,+BAiKY,IAAD,OACDmB,EAAWlB,KAAKrC,MAAM4C,gBAC5B,MAA4B,SAAxBP,KAAKrC,MAAMG,SAEX,yBAAKqD,UAAU,sEACb,yBAAKA,UAAU,yDACb,wBAAIA,UAAU,+BAAd,UACA,yBAAKA,UAAU,eACb,2BAAOC,IAAI,SAASD,UAAU,wBAA9B,gBAGA,2BACEA,UACE,iCACCnB,KAAKrC,MAAMI,UAAUC,MAAQ,2BAA6B,IAE7DqD,GAAG,SACHhC,KAAK,SACLiC,YAAY,YACZhC,MAAOU,KAAKrC,MAAML,OAClBiE,SAAUvB,KAAKd,eAEjB,4BACEiC,UAAU,0GACVK,QAASxB,KAAKzC,UAFhB,QAMCyC,KAAKrC,MAAMI,UAAUC,OACpB,yBAAKmD,UAAU,8GACb,yBACEM,QAAQ,YACRC,KAAK,eACLP,UAAU,gDAEV,0BACEQ,SAAS,UACTC,EAAE,oNACFC,SAAS,aAGb,0BAAMV,UAAU,UAAUnB,KAAKrC,MAAMI,UAAUE,OAIrD,yBAAKkD,UAAU,kBAAf,OACA,4BACEA,UAAU,2GACVK,QAASxB,KAAK3B,eAFhB,qBAUoB,SAAxB2B,KAAKrC,MAAMG,SAEX,yBAAKqD,UAAU,0CACb,yBAAKA,UAAU,8BACb,yBAAKA,UAAU,0BACb,yBAAKA,UAAU,iDAAf,mBAGA,0BAAMA,UAAU,+IACbnB,KAAKrC,MAAML,QAGd,yBAAK6D,UAAU,6CAAf,2DAKF,2BACEA,UAAU,+BACV9B,KAAK,aACLkC,SAAUvB,KAAKd,aACfI,MAAOU,KAAKrC,MAAM6B,WAClB8B,YAAY,cAEd,4BACEH,UAAU,2GACVK,QAASxB,KAAKT,kBAFhB,UAOCS,KAAKrC,MAAMqD,SACV,4BACE,wBAAIG,UAAU,2DAAd,YACCW,OAAOC,QAAQ/B,KAAKrC,MAAMqD,SAASgB,KAAI,YAAe,IAAD,mBAAZX,EAAY,KAARY,EAAQ,KACpD,OACE,wBAAIC,IAAKb,GACP,yBACEI,QAAQ,YACRC,KAAK,eACLP,UAAU,4BAEV,0BACEQ,SAAS,UACTC,EAAE,sDACFC,SAAS,aAGZI,EAAG5C,UAMbW,KAAKrC,MAAMsD,WAAa,GACvB,yBAAKE,UAAU,6CAAf,yBAKDnB,KAAKrC,MAAMH,eACV,6BACE,wBAAI2D,UAAU,2DAAd,sBAGCnB,KAAKrC,MAAMiB,YACV,4BAAQuC,UAAU,gCAAgC9B,KAAK,mBAAmBkC,SAAUvB,KAAKd,cACvF,4BAAQI,MAAM,MAAd,gBACCU,KAAKrC,MAAMiB,WAAWoD,KAAI,SAACG,GAAD,OACzB,4BAAQD,IAAKC,EAAId,GAAI/B,MAAO6C,EAAId,IAC7Bc,EAAI9C,UAKb,wBAAI8B,UAAU,2DAAd,sBAGA,2BAAOA,UAAU,cACf,2BACEiB,KAAK,QACL/C,KAAK,aACLC,OAAQ,EACRiC,SAAUvB,KAAKd,aACfmD,QAAmC,OAA1BrC,KAAKrC,MAAMqB,aAEtB,0BAAMmC,UAAU,QAAhB,mBAEF,6BACA,2BAAOA,UAAU,cACf,2BACEiB,KAAK,QACL/C,KAAK,aACLC,MAAM,OACNiC,SAAUvB,KAAKd,aACfmD,QAAmC,SAA1BrC,KAAKrC,MAAMqB,aAEtB,0BAAMmC,UAAU,QAAhB,SAEF,2BAAOA,UAAU,SACf,2BACEiB,KAAK,QACL/C,KAAK,aACLC,MAAM,SACNiC,SAAUvB,KAAKd,aACfmD,QAAmC,WAA1BrC,KAAKrC,MAAMqB,aAEtB,0BAAMmC,UAAU,QAAhB,WAEF,+BACE,2BACEiB,KAAK,QACL/C,KAAK,aACLC,MAAM,OACNiC,SAAUvB,KAAKd,aACfmD,QAAmC,SAA1BrC,KAAKrC,MAAMqB,aAEtB,0BAAMmC,UAAU,QAAhB,SAEF,wBAAIA,UAAU,2DAAd,wBAGA,2BACEA,UAAU,qBACViB,KAAK,SACL9C,MAAOU,KAAKrC,MAAMsB,gBAClBI,KAAK,kBACLiD,UAAU,UACVf,SAAUvB,KAAKd,eAEjB,4BACEiC,UAAU,uHACVK,QAASxB,KAAKnB,WAFhB,iBAWuB,cAAxBmB,KAAKrC,MAAMG,SAElB,yBAAKyE,MAAM,gDACT,yBAAKpB,UAAU,6DAAf,mBAEE,yBAAKA,UAAU,kDACZnB,KAAKrC,MAAM6E,iBAOpB,yBAAKrB,UAAU,0CACZD,GACC,yBAAKC,UAAU,uFACb,yBAAKA,UAAU,8BAAf,YACYD,EAASN,MAAQ,EAD7B,OACoCZ,KAAKrC,MAAMsB,kBAKnD,yBAAKkC,UAAU,6BACb,yBACEA,UACEnB,KAAKrC,MAAM6C,cACP,SACA,sKAGN,yBACEW,UAAU,sCACVsB,MAAO,CAAEC,MAAO,gBAEf1C,KAAKrC,MAAMgF,oBAIfzB,GACC,6BACE,2BAAIA,EAAS0B,UACZ1B,EAAS2B,QAAQb,KAAI,SAACc,EAAGC,GAAJ,OACpB,2BACEb,IAAKa,EACL5B,UACE,+FACC,EAAKxD,MAAMiC,aAAemD,EAAIC,WAC3B,6BACA,iBACH,EAAKrF,MAAM6C,cACR,EAAK7C,MAAM6C,gBAAkBuC,EAC3B,mBACA,iBACF,oBAGN,2BACE5B,UAAU,SACViB,KAAK,QACL/C,KAAK,aACLC,MAAOyD,EACPxB,SAAU,EAAKrC,aACfmD,QAAS,EAAK1E,MAAMiC,aAAemD,EAAIC,WACvCC,SAAU,EAAKtF,MAAM6C,gBAEtB,EAAK7C,MAAM6C,eACV,EAAK7C,MAAM6C,gBAAkBuC,GAC3B,yBACEtB,QAAQ,YACRC,KAAK,eACLP,UAAU,iCAEV,0BACEQ,SAAS,UACTC,EAAE,qMACFC,SAAS,aAIhB,EAAKlE,MAAM6C,gBAAkBuC,GAC5B,yBACEtB,QAAQ,YACRC,KAAK,eACLP,UAAU,uCAEV,0BACEQ,SAAS,UACTC,EAAE,qHACFC,SAAS,aAIf,0BAAMV,UAAU,QAAQ2B,OAG5B,8BAGH9C,KAAKrC,MAAMoC,UACV,wBAAIoB,UAAU,4BAAd,aAEDnB,KAAKrC,MAAMqD,SACV,4BACE,wBAAIG,UAAU,qDAAd,gBAGCW,OAAOC,QAAQ/B,KAAKrC,MAAMqD,SAASgB,KAAI,YAAe,IAAD,mBAAZX,EAAY,KAARY,EAAQ,KAC9CS,EACwB,IAA5B,EAAK/E,MAAMmC,aACP,EACCmC,EAAGiB,MAAQ,EAAKvF,MAAMmC,aAAgB,IAC7C,OACE,wBACEoC,IAAKb,EACLF,UAAU,uDAEV,0BACEA,UAAU,6EACVsB,MAAO,CAAEC,MAAOA,EAAQ,MAEvBT,EAAG5C,MAEN,0BAAM8B,UAAU,yCACbc,EAAGiB,MADN,MACgB,EAAKvF,MAAMmC,yBAje/C,GAAyBqD,cCOLC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvF,MAAK,SAAAwF,GACJA,EAAaC,gBAEdC,OAAM,SAAAnG,GACLG,QAAQH,MAAMA,EAAMoG,c","file":"static/js/main.939ffb47.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport io from \"socket.io-client\";\nimport axios from \"axios\";\nimport \"./tailwind.css\";\n\nexport class App extends Component {\n  constructor(props) {\n    super(props);\n    this.SERVER = \"http://localhost:4000\"; //\"https://crazytrivia.herokuapp.com/\"\n    this.socket = io.connect(this.SERVER);\n    this.state = {\n      userAnswer: \"-1\",\n      gameID: \"\",\n      playerName: \"\",\n      appState: \"init\",\n      isGameCreator: false,\n      numTypers: 0,\n      numberQuestions: 10,\n      difficulty: \"-1\",\n      selectedCategory: \"-1\",\n      updatedIndex: 0,\n      gameOver: false,\n      joinError: {\n        error: false,\n        msg: \"\",\n      },\n    };\n  }\n\n  componentDidMount() {\n    this.socket.on(\n      \"start countdown\",\n      ({ countdownLength, questionLength, numberQuestions }) => {\n        console.log(\"START COUNTDOWN\");\n        this.countdownTimer(countdownLength, \"gameCountdown\");\n        this.setState({\n          appState: \"countdown\",\n          questionLength: questionLength,\n          countdownLength: countdownLength,\n          numberQuestions: numberQuestions,\n        });\n      }\n    );\n    this.socket.on(\"question\", (q) => {\n      console.log(\"got a question: \" + JSON.stringify(q));\n      this.setState({\n        appState: \"play\",\n        currentQuestion: q,\n        correctAnswer: undefined,\n        userAnswer: \"-1\",\n      });\n      this.countdownTimer(this.state.questionLength, \"questionCountdown\");\n    });\n    this.socket.on(\"request answer\", () => {\n      // validate on client or server side????????\n      // server also needs to know for the score... so might as well do it there....\n      this.socket.emit(\n        \"validate answer\",\n        {\n          answer: this.state.userAnswer,\n          questionNum: this.state.currentQuestion.index,\n          gameID: this.state.gameID,\n        },\n        ({ isCorrect, correctAnswer }) => {\n          console.log(\"validate aswer callback :): \" + correctAnswer);\n          this.setState((prevState) => {\n            return {\n              correctAnswer: correctAnswer,\n              updatedIndex: prevState.updatedIndex + 1,\n            };\n          });\n        }\n      );\n    });\n    this.socket.on(\"number typers\", (n) => this.setState({ numTypers: n }));\n    this.socket.on(\"players\", (p) => this.setState({ players: p }));\n    this.socket.on(\"joining\", (n) => {\n      console.log(\"num joiners is \" + n);\n      this.setState({ numJoiners: n });\n    });\n    this.socket.on(\"game over\", () => {\n      console.log(\"GAME OVER\");\n      this.setState({\n        currentQuestion: undefined,\n        // correctAnswer: undefined,\n        userAnswer: \"-1\",\n        gameOver: true,\n      });\n    });\n  }\n\n  countdownTimer = (n, timerName) => {\n    this.setState({ [timerName]: n });\n    if (n > 0) {\n      setTimeout(() => this.countdownTimer(n - 1, timerName), 1000);\n    }\n  };\n\n  handleNewGameID = (gameID) => {\n    this.setState({ gameID: gameID });\n  };\n\n  joinGame = () => {\n    this.setState({ isGameCreator: false });\n    this.socket.emit(\"join game\", this.state.gameID, (callbackData) => {\n      if (callbackData.sucess) {\n        this.setState({ appState: \"join\" });\n        // this.handleTyping(true);\n      } else {\n        this.setState({\n          joinError: { error: true, msg: callbackData.errorMsg },\n        });\n        console.log(callbackData.errorMsg);\n      }\n    });\n  };\n\n  createNewGame = () => {\n    this.setState({ isGameCreator: true, appState: \"join\" });\n    this.socket.emit(\"create new game\", {}, (gameID) => {\n      console.log(\"got gameid from callback: \" + gameID);\n      this.setState({ gameID: gameID });\n    });\n    axios.get(`${this.SERVER}/categories`).then((cats) => {\n      console.log(cats.data);\n      this.setState({ categories: cats.data });\n    });\n  };\n\n  startGame = () => {\n    this.socket.emit(\"start game\", {\n      gameID: this.state.gameID,\n      category: this.state.selectedCategory,\n      difficulty: this.state.difficulty,\n      numberQuestions: this.state.numberQuestions,\n    });\n    this.setState({ appState: \"countdown\" });\n  };\n\n  handleChange = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value,\n    });\n    if (event.target.name === \"gameID\") {\n      this.setState({\n        joinError: { error: false, msg: \"\" },\n      });\n    }\n  };\n\n  // handleTyping = (isTyping) => {\n  //   this.socket.emit(\"handle typer\", {\n  //     gameID: this.state.gameID,\n  //     incNum: isTyping ? 1 : -1,\n  //   });\n  // };\n\n  handleSubmitName = () => {\n    // this.handleTyping(false);\n    this.socket.emit(\"submit name\", {\n      gameID: this.state.gameID,\n      playerName: this.state.playerName,\n    });\n    this.socket.emit(\"joining\", { numInc: this.state.isGameCreator ? 0 : -1, gameID: this.state.gameID });\n  };\n\n  render() {\n    const currentQ = this.state.currentQuestion;\n    if (this.state.appState === \"init\") {\n      return (\n        <div className=\"prism-bg object-cover h-screen w-screen absolute flex items-center\">\n          <div className=\"max-w-sm bg-gray-100 mx-auto p-8 shadow-lg rounded-md\">\n            <h1 className=\"font-hairline mb-2 text-4xl\">Trivia</h1>\n            <div className=\"w-full mb-4\">\n              <label for=\"gameID\" className=\"block font-bold mx-2\">\n                Join a Game:\n              </label>\n              <input\n                className={\n                  \"p-2 shadow rounded-l text-sm \" +\n                  (this.state.joinError.error ? \" border-2 border-red-800\" : \"\")\n                }\n                id=\"gameID\"\n                name=\"gameID\"\n                placeholder=\"game code\"\n                value={this.state.gameID}\n                onChange={this.handleChange}\n              />\n              <button\n                className=\"bg-purple-800 hover:bg-purple-700 text-white uppercase shadow py-2 px-4 tracking-wide text-sm rounded-r\"\n                onClick={this.joinGame}\n              >\n                join\n              </button>\n              {this.state.joinError.error && (\n                <div className=\"rounded border-red-800 border-l-4 bg-red-200 p-2 my-2 flex items-center text-red-800 text-sm leading-tight\">\n                  <svg\n                    viewBox=\"0 0 20 20\"\n                    fill=\"currentColor\"\n                    className=\"exclamation w-8 h-8 inline pr-2 flex-initial\"\n                  >\n                    <path\n                      fillRule=\"evenodd\"\n                      d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\"\n                      clipRule=\"evenodd\"\n                    />\n                  </svg>\n                  <span className=\"flex-1\">{this.state.joinError.msg}</span>\n                </div>\n              )}\n            </div>\n            <div className=\"font-bold mx-2\">or:</div>\n            <button\n              className=\"w-full bg-teal-600 hover:bg-teal-500 text-white uppercase shadow py-2 px-4 tracking-wide rounded text-sm\"\n              onClick={this.createNewGame}\n            >\n              create new game\n            </button>\n          </div>\n        </div>\n      );\n    }\n    if (this.state.appState === \"join\") {\n      return (\n        <div className=\"bg-gray-100 w-screen h-screen absolute\">\n          <div className=\"max-w-md mx-auto px-2 py-1\">\n            <div className=\"mx-auto content-center\">\n              <div className=\"text-sm uppercase tracking-wide text-gray-700\">\n                your game code:\n              </div>\n              <span className=\"block uppercase tracking-wider text-xl font-mono px-3 py-1 rounded border-gray-700 border-2 bg-white shadow text-gray-800 font-hairline m-2\">\n                {this.state.gameID}\n              </span>\n\n              <div className=\"text-gray-700 italic text-sm leading-none\">\n                share this code with friends who want to join the game\n              </div>\n            </div>\n\n            <input\n              className=\"p-2 shadow rounded-l text-sm\"\n              name=\"playerName\"\n              onChange={this.handleChange}\n              value={this.state.playerName}\n              placeholder=\"your name\"\n            />\n            <button\n              className=\"bg-purple-800 hover:bg-purple-700 text-white uppercase shadow py-2 px-4 tracking-wider text-sm rounded-r\"\n              onClick={this.handleSubmitName}\n            >\n              submit\n            </button>\n\n            {this.state.players && (\n              <ul>\n                <h2 className=\"uppercase tracking-wide text-sm text-gray-700 mb-2 mt-4\">Players:</h2>\n                {Object.entries(this.state.players).map(([id, pl]) => {\n                  return (\n                    <li key={id}>\n                      <svg\n                        viewBox=\"0 0 20 20\"\n                        fill=\"currentColor\"\n                        className=\"user w-8 h-8 inline pr-1\"\n                      >\n                        <path\n                          fillRule=\"evenodd\"\n                          d=\"M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z\"\n                          clipRule=\"evenodd\"\n                        />\n                      </svg>\n                      {pl.name}\n                    </li>\n                  );\n                })}\n              </ul>\n            )}\n            {this.state.numJoiners > 0 && (\n              <div className=\"italic gray-600 text-sm animate-pulse m-2\">\n                someone is joining...\n              </div>\n            )}\n\n            {this.state.isGameCreator && (\n              <div>\n                <h2 className=\"uppercase tracking-wide text-sm text-gray-700 mb-2 mt-4\">\n                  Select a category:\n                </h2>\n                {this.state.categories && (\n                  <select className=\"p-2 rounded shadow max-w-full\" name=\"selectedCategory\" onChange={this.handleChange}>\n                    <option value=\"-1\">Any category</option>\n                    {this.state.categories.map((cat) => (\n                      <option key={cat.id} value={cat.id}>\n                        {cat.name}\n                      </option>\n                    ))}\n                  </select>\n                )}\n                <h2 className=\"uppercase tracking-wide text-sm text-gray-700 mb-2 mt-4\">\n                  Select difficulty:\n                </h2>\n                <label className=\"block mb-1\">\n                  <input\n                    type=\"radio\"\n                    name=\"difficulty\"\n                    value={-1}\n                    onChange={this.handleChange}\n                    checked={this.state.difficulty === \"-1\"}\n                  />\n                  <span className=\"ml-2\">Any difficulty</span>\n                </label>\n                <hr/>\n                <label className=\"block mt-1\">\n                  <input\n                    type=\"radio\"\n                    name=\"difficulty\"\n                    value=\"easy\"\n                    onChange={this.handleChange}\n                    checked={this.state.difficulty === \"easy\"}\n                  />\n                  <span className=\"ml-2\">Easy</span>\n                </label>\n                <label className=\"block\">\n                  <input\n                    type=\"radio\"\n                    name=\"difficulty\"\n                    value=\"medium\"\n                    onChange={this.handleChange}\n                    checked={this.state.difficulty === \"medium\"}\n                  />\n                  <span className=\"ml-2\">Medium</span>\n                </label>\n                <label>\n                  <input\n                    type=\"radio\"\n                    name=\"difficulty\"\n                    value=\"hard\"\n                    onChange={this.handleChange}\n                    checked={this.state.difficulty === \"hard\"}\n                  />\n                  <span className=\"ml-2\">Hard</span>\n                </label>\n                <h2 className=\"uppercase tracking-wide text-sm text-gray-700 mb-2 mt-4\">\n                  Number of questions:\n                </h2>\n                <input\n                  className=\"p-2 rounded shadow\"\n                  type=\"number\"\n                  value={this.state.numberQuestions}\n                  name=\"numberQuestions\"\n                  inputMode=\"numeric\"\n                  onChange={this.handleChange}\n                ></input>\n                <button\n                  className=\"block mx-auto bg-teal-700 hover:bg-teal-600 text-white uppercase shadow py-2 px-4 tracking-wide text-sm rounded mt-4\"\n                  onClick={this.startGame}\n                >\n                  start game\n                </button>\n              </div>\n            )}\n          </div>\n        </div>\n      );\n    } else if (this.state.appState === \"countdown\") {\n      return (\n        <div class=\"absolute w-screen h-screen flex items-center\">\n          <div className=\"max-w-sm mx-auto content-center font-thin text-purple-700\">\n            starting game in\n            <div className=\"text-6xl font-black animate-ping text-gray-900\">\n              {this.state.gameCountdown}\n            </div>\n          </div>\n        </div>\n      );\n    }\n    return (\n      <div className=\"bg-gray-100 w-screen h-screen absolute\">\n        {currentQ && (\n          <div className=\"absolute w-full uppercase bg-purple-900 text-gray-300 text-xs tracking-wider shadow\">\n            <div className=\"max-w-sm mx-auto px-2 py-1\">\n              question {currentQ.index + 1} of {this.state.numberQuestions}\n            </div>\n          </div>\n        )}\n\n        <div className=\"max-w-sm mx-auto my-8 p-2\">\n          <div\n            className={\n              this.state.correctAnswer\n                ? \"hidden\"\n                : \"fixed bottom-0 right-0 lg:absolute lg:-ml-16 lg:-mt-1 lg:bottom-auto lg:right-auto font-black text-2xl h-12 w-12 m-4 rounded-full bg-teal-700 text-gray-100 shadow\"\n            }\n          >\n            <div\n              className=\"mx-auto animate-bounce min-w-0 pt-3\"\n              style={{ width: \"min-content\" }}\n            >\n              {this.state.questionCountdown}\n            </div>\n          </div>\n\n          {currentQ && (\n            <div>\n              <p>{currentQ.question}</p>\n              {currentQ.answers.map((a, idx) => (\n                <label\n                  key={idx}\n                  className={\n                    \"transition relative block bg-white py-2 px-4 border-solid rounded my-2 box-border border-2 \" +\n                    (this.state.userAnswer === idx.toString()\n                      ? \"shadow-xl z-40 border-l-8 \"\n                      : \"shadow z-20 \") +\n                    (this.state.correctAnswer\n                      ? this.state.correctAnswer === idx\n                        ? \"border-green-500\"\n                        : \"border-red-500\"\n                      : \"border-gray-800\")\n                  }\n                >\n                  <input\n                    className=\"hidden\"\n                    type=\"radio\"\n                    name=\"userAnswer\"\n                    value={idx}\n                    onChange={this.handleChange}\n                    checked={this.state.userAnswer === idx.toString()}\n                    disabled={this.state.correctAnswer}\n                  />\n                  {this.state.correctAnswer &&\n                    this.state.correctAnswer !== idx && (\n                      <svg\n                        viewBox=\"0 0 20 20\"\n                        fill=\"currentColor\"\n                        className=\"x w-6 h-6 inline text-red-500\"\n                      >\n                        <path\n                          fillRule=\"evenodd\"\n                          d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\"\n                          clipRule=\"evenodd\"\n                        />\n                      </svg>\n                    )}\n                  {this.state.correctAnswer === idx && (\n                    <svg\n                      viewBox=\"0 0 20 20\"\n                      fill=\"currentColor\"\n                      className=\"check w-6 h-6 inline text-green-500\"\n                    >\n                      <path\n                        fillRule=\"evenodd\"\n                        d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"\n                        clipRule=\"evenodd\"\n                      />\n                    </svg>\n                  )}\n                  <span className=\"pl-2\">{a}</span>\n                </label>\n              ))}\n              <hr />\n            </div>\n          )}\n          {this.state.gameOver && (\n            <h1 className=\"text-3xl mx-2 font-black\">Game over</h1>\n          )}\n          {this.state.players && (\n            <ul>\n              <h2 className=\"uppercase tracking-wide text-sm m-1 text-gray-700\">\n                Leaderboard:\n              </h2>\n              {Object.entries(this.state.players).map(([id, pl]) => {\n                const width =\n                  this.state.updatedIndex === 0\n                    ? 0\n                    : (pl.score / this.state.updatedIndex) * 100;\n                return (\n                  <li\n                    key={id}\n                    className=\"bg-pink-300 overflow-hidden relative rounded shadow\"\n                  >\n                    <span\n                      className=\"bg-pink-600 pl-2 py-1 whitespace-no-wrap inline-block text-white font-bold\"\n                      style={{ width: width + \"%\" }}\n                    >\n                      {pl.name}\n                    </span>\n                    <span className=\"py-1 pr-2 text-white right-0 absolute\">\n                      {pl.score} / {this.state.updatedIndex}\n                    </span>\n                  </li>\n                );\n              })}\n            </ul>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}