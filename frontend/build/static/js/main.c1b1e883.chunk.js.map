{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","countdownTimer","n","setState","countdownTime","setTimeout","handleNewGameID","gameID","joinGame","isGameCreator","socket","emit","state","callbackData","sucess","appState","console","log","errorMsg","createNewGame","axios","get","SERVER","then","cats","data","categories","startGame","category","selectedCategory","difficulty","numberQuestions","handleChange","event","target","name","value","handleSubmitName","playerName","numInc","io","connect","userAnswer","isCorrectAnswer","numTypers","this","on","countdownLength","q","currentQuestion","correctAnswer","undefined","answer","questionNum","index","isCorrect","p","players","numJoiners","className","for","id","placeholder","onChange","onClick","Object","entries","map","pl","key","type","checked","cat","toString","question","answers","a","idx","disabled","score","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c1b1e883.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport io from \"socket.io-client\";\nimport axios from \"axios\";\nimport \"./index.css\";\nimport \"./tailwind.css\"\n\nexport class App extends Component {\n  constructor(props) {\n    super(props);\n    this.SERVER = \"http://localhost:4000\"; //\"https://crazytrivia.herokuapp.com/\"\n    this.socket = io.connect(this.SERVER);\n    this.state = {\n      userAnswer: \"-1\",\n      isCorrectAnswer: 0,\n      // ⬆️ https://stackoverflow.com/a/4666482/4493137\n      gameID: \"\",\n      playerName: \"\",\n      appState: \"init\",\n      isGameCreator: false,\n      numTypers: 0,\n      numberQuestions: 10,\n      difficulty: \"-1\",\n      category: \"-1\"\n    };\n  }\n\n  componentDidMount() {\n    this.socket.on(\"start countdown\", (countdownLength) => {\n      this.countdownTimer(countdownLength);\n      this.setState({\n        appState: \"play\",\n      });\n    });\n    this.socket.on(\"question\", (q) => {\n      console.log('got a question: ' + q)\n      this.setState({\n        currentQuestion: q,\n        correctAnswer: undefined,\n        userAnswer: \"-1\",\n      });\n    });\n    this.socket.on(\"request answer\", () => {\n      // validate on client or server side????????\n      // server also needs to know for the score... so might as well do it there....\n      this.socket.emit(\n        \"validate answer\",\n        {\n          answer: this.state.userAnswer,\n          questionNum: this.state.currentQuestion.index,\n          gameID: this.state.gameID,\n        },\n        ({ isCorrect, correctAnswer }) => {\n          this.setState({ correctAnswer: correctAnswer });\n        }\n      );\n    });\n    this.socket.on(\"number typers\", (n) => this.setState({ numTypers: n }));\n    this.socket.on(\"players\", (p) => this.setState({ players: p }));\n    this.socket.on(\"joining\", (n) => {\n      console.log(\"num joiners is \" + n);\n      this.setState({ numJoiners: n });\n    });\n    this.socket.on(\"game over\", () =>\n      this.setState({\n        currentQuestion: undefined,\n        correctAnswer: undefined,\n        userAnswer: \"-1\",\n      })\n    );\n  }\n\n  countdownTimer = (n) => {\n    this.setState({ countdownTime: n });\n    if (n > 0) {\n      setTimeout(() => this.countdownTimer(n - 1), 1000);\n    }\n  };\n\n  handleNewGameID = (gameID) => {\n    this.setState({ gameID: gameID });\n  };\n\n  joinGame = () => {\n    this.setState({ isGameCreator: false });\n    this.socket.emit(\"join game\", this.state.gameID, (callbackData) => {\n      if (callbackData.sucess) {\n        this.setState({ appState: \"join\" });\n        // this.handleTyping(true);\n      } else {\n        console.log(callbackData.errorMsg);\n      }\n    });\n  };\n\n  createNewGame = () => {\n    this.setState({ isGameCreator: true, appState: \"join\" });\n    this.socket.emit(\"create new game\", {}, (gameID) => {\n      console.log(\"got gameid from callback: \" + gameID);\n      this.setState({ gameID: gameID });\n    });\n    axios.get(`${this.SERVER}/categories`).then((cats) => {\n      console.log(cats.data);\n      this.setState({ categories: cats.data });\n    });\n  };\n\n  startGame = () => {\n    this.socket.emit(\"start game\", {\n      gameID: this.state.gameID,\n      category: this.state.selectedCategory,\n      difficulty: this.state.difficulty,\n      numberQuestions: this.state.numberQuestions\n    });\n    this.setState({ appState: \"play\" });\n  };\n\n  handleChange = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value,\n    });\n    console.log(\"changed \" + event.target.name + \" to \" + event.target.value);\n  };\n\n  // handleTyping = (isTyping) => {\n  //   this.socket.emit(\"handle typer\", {\n  //     gameID: this.state.gameID,\n  //     incNum: isTyping ? 1 : -1,\n  //   });\n  // };\n\n  handleSubmitName = () => {\n    // this.handleTyping(false);\n    this.socket.emit(\"submit name\", {\n      gameID: this.state.gameID,\n      playerName: this.state.playerName,\n    });\n    this.socket.emit(\"joining\", { numInc: -1, gameID: this.state.gameID });\n  };\n\n  render() {\n    if (this.state.appState === \"init\") {\n      return (\n        <div className=\"prism-bg w-full h-full object-cover\">\n        <div className=\"max-w-md mx-auto bg-gray-100 p-8\">\n          <label for=\"gameID\">join a game:</label>\n          <input\n            id=\"gameID\"\n            name=\"gameID\"\n            placeholder=\"game code\"\n            value={this.state.gameID}\n            onChange={this.handleChange}\n          />\n          <button onClick={this.joinGame}>join</button>\n          <br />\n          ---- or ----\n          <br />\n          <button onClick={this.createNewGame}>create new game</button>\n        </div>\n        </div>\n      );\n    }\n    if (this.state.appState === \"join\") {\n      return (\n        <div>\n          <p>{this.state.gameID}</p>\n          <input\n            name=\"playerName\"\n            onChange={this.handleChange}\n            value={this.state.playerName}\n            placeholder=\"your name\"\n          />\n          <button onClick={this.handleSubmitName}>submit</button>\n\n          {this.state.numJoiners > 0 && (\n            <p>\n              <i>someone is joining...</i>\n            </p>\n          )}\n          {this.state.players && (\n            <ul>\n              <h2>Players:</h2>\n              {Object.entries(this.state.players).map(([id, pl]) => {\n                return <li key={id}>{pl.name}</li>;\n              })}\n            </ul>\n          )}\n\n          {this.state.isGameCreator && (\n            <div>\n              <h2>Select a category:</h2>\n              {this.state.categories && (\n                <div>\n                  <label>\n                    <input\n                      type=\"radio\"\n                      name=\"selectedCategory\"\n                      value={-1}\n                      onChange={this.handleChange}\n                      checked={this.state.selectedCategory === \"-1\"}\n                    />\n                    Any category\n                  </label>\n                  {this.state.categories.map((cat) => (\n                    <label key={cat.id}>\n                      <input\n                        type=\"radio\"\n                        name=\"selectedCategory\"\n                        value={cat.id}\n                        onChange={this.handleChange}\n                        checked={\n                          this.state.selectedCategory === cat.id.toString()\n                        }\n                      />\n                      {cat.name}\n                    </label>\n                  ))}\n                </div>\n              )}\n              <h2>Select difficulty:</h2>\n              <label>\n                <input\n                  type=\"radio\"\n                  name=\"difficulty\"\n                  value={-1}\n                  onChange={this.handleChange}\n                  checked={this.state.difficulty === \"-1\"}\n                />\n                Any difficulty\n              </label>\n              <label>\n                <input\n                  type=\"radio\"\n                  name=\"difficulty\"\n                  value=\"easy\"\n                  onChange={this.handleChange}\n                  checked={this.state.difficulty === \"easy\"}\n                />\n                Easy\n              </label>\n              <label>\n                <input\n                  type=\"radio\"\n                  name=\"difficulty\"\n                  value=\"medium\"\n                  onChange={this.handleChange}\n                  checked={this.state.difficulty === \"medium\"}\n                />\n                Medium\n              </label>\n              <label>\n                <input\n                  type=\"radio\"\n                  name=\"difficulty\"\n                  value=\"hard\"\n                  onChange={this.handleChange}\n                  checked={this.state.difficulty === \"hard\"}\n                />\n                Hard\n              </label>\n              <h2>Number of questions</h2>\n              <input\n                type=\"number\"\n                value={this.state.numberQuestions}\n                name=\"numberQuestions\"\n                onChange={this.handleChange}\n              ></input>\n              <button onClick={this.startGame}>start game</button>\n            </div>\n          )}\n        </div>\n      );\n    }\n    return (\n      <div>\n        {this.state.countdownTime > 0 && (\n          <p>starting game in {this.state.countdownTime}</p>\n        )}\n        {this.state.currentQuestion && (\n          <div>\n            <p>{this.state.currentQuestion.question}</p>\n            {this.state.currentQuestion.answers.map((a, idx) => (\n              <label key={idx}>\n                <input\n                  type=\"radio\"\n                  name=\"userAnswer\"\n                  value={idx}\n                  onChange={this.handleChange}\n                  className={\n                    idx === this.state.correctAnswer ? \"right\" : \"wrong\"\n                  }\n                  checked={this.state.userAnswer === idx.toString()}\n                  disabled={this.state.correctAnswer}\n                />\n                {a}\n              </label>\n            ))}\n          </div>\n        )}\n        <p>{this.state.correctAnswer}</p>\n\n        {this.state.players && (\n          <ul>\n            <h2>Leaderboard:</h2>\n            {Object.entries(this.state.players).map(([id, pl]) => {\n              return (\n                <li key={id}>\n                  <b>{pl.name}</b>: {pl.score}\n                </li>\n              );\n            })}\n          </ul>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}